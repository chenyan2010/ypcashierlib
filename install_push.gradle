apply plugin: 'maven'

boolean checkProperty(String propname) {
    if(project.hasProperty(propname)) {
        return true
    }
    throw new RuntimeException("'" + propname + "' is undefined in module: " + project.getName())
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

task androidJavadocs(type: Javadoc) {
    options.encoding = "utf-8"
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

uploadArchives {
    repositories {
        mavenDeployer {

            checkProperty("releaseMavenUrl")
            def mavenRepositoryUrl = releaseMavenUrl

            if(verName.endsWith("-SNAPSHOT")) {
                checkProperty("snapshotMavenUrl")
                mavenRepositoryUrl = snapshotMavenUrl
            }

            repository(url: mavenRepositoryUrl) {
                authentication(userName: properties.getProperty("NEXUS_USER"), password: properties.getProperty("NEXUS_PASSWORD"))
            }

            pom.project {
                packaging 'aar'
                checkProperty("libraryName")
                name libraryName
                checkProperty("verName")
                version = verName
                checkProperty("artifactId")
                artifactId = artifactId
                checkProperty("publishGroupId")
                groupId = publishGroupId
                checkProperty("libraryDescription")
                description libraryDescription

                licenses {
                    license {
                        checkProperty("licenseName")
                        name licenseName
                        checkProperty("licenseUrl")
                        url licenseUrl
                    }
                }

                developers {
                    developer {
                        checkProperty("developerId")
                        id developerId
                        checkProperty("developerName")
                        name developerName
                        checkProperty("developerEmail")
                        email developerEmail
                    }
                }
            }
        }
    }
}